// Generated by CoffeeScript 1.6.2
(function() {
  (function() {
    "use strict";
    var InitialFact, ObjectPattern, Pattern, constraint, constraintMatcher, declare, extd, forEach, merge;

    extd = require('./extended');
    merge = extd.merge;
    forEach = extd.forEach;
    declare = extd.declare;
    constraintMatcher = require('./constraintMatcher');
    constraint = require('./constraint');
    Pattern = declare({});
    ObjectPattern = Pattern.extend({
      instance: {
        constructor: function(type, alias, conditions, store, options) {
          var cnstrnt, constrnts, _i, _len, _ref, _results;

          options || (options = {});
          this.type = type;
          this.alias = alias;
          this.conditions = conditions;
          this.pattern = options.pattern;
          this.constraints = [new constraint.ObjectConstraint(type)];
          constrnts = constraintMatcher.toConstraints(conditions, merge({
            alias: alias
          }, options));
          if (constrnts.length) {
            this.constraints = this.constraints.concat(constrnts);
          } else {
            this.constraints.push(new constraint.TrueConstraint());
          }
          if (store && !extd.isEmpty(store)) {
            this.constraints.push(new constraint.HashConstraint(store));
          }
          _ref = this.constraints;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cnstrnt = _ref[_i];
            _results.push(cnstrnt.set("alias", alias));
          }
          return _results;
        },
        hasConstraint: function(type) {
          return extd.some(this.constraints, function(c) {
            return c instanceof type;
          });
        },
        hashCode: function() {
          return [this.type, this.alias, extd.format("%j", this.conditions)].join(":");
        },
        toString: function() {
          return extd.format("%j", this.constraints);
        }
      }
    }).as(exports, "ObjectPattern");
    ObjectPattern.extend().as(exports, "NotPattern");
    Pattern.extend({
      instance: {
        constructor: function(left, right) {
          this.leftPattern = left;
          return this.rightPattern = right;
        },
        hashCode: function() {
          return [this.leftPattern.hashCode(), this.rightPattern.hashCode()].join(":");
        },
        getters: {
          constraints: function() {
            return this.leftPattern.constraints.concat(this.rightPattern.constraints);
          }
        }
      }
    }).as(exports, "CompositePattern");
    InitialFact = declare({}).as(exports, "InitialFact");
    return ObjectPattern.extend({
      instance: {
        constructor: function() {
          return this._super([InitialFact, "i", [], {}]);
        },
        assert: function() {
          return true;
        }
      }
    }).as(exports, "InitialFactPattern");
  })();

}).call(this);
