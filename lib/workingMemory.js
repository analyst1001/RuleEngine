// Generated by CoffeeScript 1.6.2
/*

  Declare Fact object and Working memory Object

  Fact Object
    object --> ???
    recency --> an integer representing recency of fact in working memory
    id --> a unique integer representing each rule object
    equals(fact) --> Boolean
      fact --> a fact object
    returns if the fact parameter is equal to the current fact object implying both facts are same

  WorkingMemory Object
    recency --> an integer to set the recency of facts in fact list
    facts --> a list of facts currently present in working memory
    
    dispose() --> Nothing
    removes all facts from the working memory

    assertFact(fact) --> Fact object
      fact --> the Fact object to be pushed in memory
    return the fact parameter after pushing it in working memory

    modifyFact(fact) --> Fact object
      fact --> the Fact object to be modified
    returns the fact parameter from working memory if it is present in working memory

    retractFact(fact) --> Fact object
      fact --> the Fact object to be removed from the working memory
    returns the fact parameter from the working memory after removing it from the working memory
*/


(function() {
  "use strict";
  var declare, id;

  declare = require("declare.js");

  id = 0;

  declare({
    instance: {
      constructor: function(obj) {
        this.object = obj;
        this.recency = 0;
        return this.id = id++;
      },
      equals: function(fact) {
        return fact !== null && (fact instanceof this._static ? fact.object === this.object : fact === this.object);
      },
      hashCode: function() {
        return this.id;
      }
    }
  }).as(exports, "Fact");

  declare({
    instance: {
      constructor: function() {
        this.recency = 0;
        return this.facts = [];
      },
      dispose: function() {
        return this.facts.length = 0;
      },
      assertFact: function(fact) {
        if (fact.object === null) {
          throw new Error("The fact asserted cannot be null!");
        }
        fact.recency = this.recency++;
        this.facts.push(fact);
        return fact;
      },
      modifyFact: function(fact) {
        var existingFact, _i, _len, _ref;

        _ref = this.facts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          existingFact = _ref[_i];
          if (existingFact.equals(fact)) {
            return existingFact;
          }
        }
        throw new Error("The fact to modify does not exists");
      },
      retractFact: function(fact) {
        var existingFact, facts, i, _i, _len;

        facts = this.facts;
        for (i = _i = 0, _len = facts.length; _i < _len; i = ++_i) {
          existingFact = facts[i];
          if (existingFact.equals(fact)) {
            this.facts.splice(i, 1);
            return existingFact;
          }
        }
        throw new Error("The fact to remove does not exists");
      }
    }
  }).as(exports, "WorkingMemory");

}).call(this);
