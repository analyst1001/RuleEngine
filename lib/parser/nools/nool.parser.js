// Generated by CoffeeScript 1.6.2
/*
  Defines function for parsing DSL 

  function parse(src, keywords, context) -->  Nothing
    src       --> string containing DSL text
    keywords  --> hash of types of blocks as key and functions to parse those blocks as corresponding values
    context   --> hash to store context information about rules
  returns nothing

  function parse(src)  --> Hash
    src --> string containing DSL text
  returns a hash containing context information about rules
*/


(function() {
  "use strict";
  var keys, parse, tokens, utils;

  tokens = require('./tokens.coffee');

  keys = require('../../extended').hash.keys;

  utils = require('./util.coffee');

  parse = function(src, keywords, context) {
    var blockType, blockTypes, e, index, orig, _results;

    orig = src;
    src = src.replace(/\/\/(.*)[\n|\r|\r\n]/g, "").replace(/\n|\r|\r\n/g, " ");
    blockTypes = new RegExp("^(" + (keys(keywords).join('|')) + ")");
    _results = [];
    while (src && ((index = utils.findNextTokenIndex(src)) !== -1)) {
      src = src.substr(index);
      blockType = src.match(blockTypes);
      if (blockType != null) {
        blockType = blockType[1];
        if (blockType in keywords) {
          try {
            _results.push(src = keywords[blockType](src, context, parse).replace(/^\s*|\s*$/g, ""));
          } catch (_error) {
            e = _error;
            throw new Error("Invalid '" + blockType + "' definition\nError message: " + e.message);
          }
        } else {
          throw new Error("Unknown token '" + blockType + "' found. Tokens can be one of the following \"" + (keys(keywords).join(',')) + "\". Code:\n" + src);
        }
      } else {
        throw new Error("No keyword to start a block or declaration (one of the following \"" + (keys(keywords).join(',')) + "\") found starting from\n" + src);
      }
    }
    return _results;
  };

  exports.parse = function(src) {
    var context;

    context = {
      define: [],
      rules: [],
      scope: []
    };
    parse(src, tokens, context);
    return context;
  };

}).call(this);
