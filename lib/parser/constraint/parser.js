/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"EXPRESSION":4,"EOF":5,"UNARY_EXPRESSION":6,"LITERAL_EXPRESSION":7,"-":8,"MULTIPLICATIVE_EXPRESSION":9,"*":10,"/":11,"%":12,"ADDITIVE_EXPRESSION":13,"+":14,"EXPONENT_EXPRESSION":15,"^":16,"RELATIONAL_EXPRESSION":17,"<":18,">":19,"<=":20,">=":21,"EQUALITY_EXPRESSION":22,"==":23,"!=":24,"=~":25,"!=~":26,"IN_EXPRESSION":27,"in":28,"ARRAY_EXPRESSION":29,"notIn":30,"OBJECT_EXPRESSION":31,"AND_EXPRESSION":32,"&&":33,"OR_EXPRESSION":34,"||":35,"ARGUMENT_LIST":36,",":37,"FUNCTION":38,"IDENTIFIER":39,"(":40,")":41,"IDENTIFIER_EXPRESSION":42,".":43,"STRING_EXPRESSION":44,"STRING":45,"NUMBER_EXPRESSION":46,"NUMBER":47,"REGEXP_EXPRESSION":48,"REGEXP":49,"BOOLEAN_EXPRESSION":50,"BOOLEAN":51,"NULL_EXPRESSION":52,"NULL":53,"[":54,"]":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"-",10:"*",11:"/",12:"%",14:"+",16:"^",18:"<",19:">",20:"<=",21:">=",23:"==",24:"!=",25:"=~",26:"!=~",28:"in",30:"notIn",33:"&&",35:"||",37:",",39:"IDENTIFIER",40:"(",41:")",43:".",45:"STRING",47:"NUMBER",49:"REGEXP",51:"BOOLEAN",53:"NULL",54:"[",55:"]"},
productions_: [0,[3,2],[6,1],[6,2],[9,1],[9,3],[9,3],[9,3],[13,1],[13,3],[13,3],[15,1],[15,3],[17,1],[17,3],[17,3],[17,3],[17,3],[22,1],[22,3],[22,3],[22,3],[22,3],[27,1],[27,3],[27,3],[27,3],[27,3],[32,1],[32,3],[34,1],[34,3],[36,1],[36,3],[38,3],[38,4],[31,1],[31,3],[31,3],[42,1],[44,1],[46,1],[48,1],[50,1],[52,1],[29,2],[29,3],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 3:this.$ = [$$[$0], null, 'unminus'];
break;
case 5:this.$ = [$$[$0-2], $$[$0], 'mult'];
break;
case 6:this.$ = [$$[$0-2], $$[$0], 'div'];
break;
case 7:this.$ = [$$[$0-2], $$[$0], 'mod'];
break;
case 9:this.$ = [$$[$0-2], $$[$0], 'plus'];
break;
case 10:this.$ = [$$[$0-2], $$[$0], 'minus'];
break;
case 12:this.$ = [$$[$0-2], $$[$0], 'pow'];
break;
case 14:this.$ = [$$[$0-2], $$[$0], 'lt'];
break;
case 15:this.$ = [$$[$0-2], $$[$0], 'gt'];
break;
case 16:this.$ = [$$[$0-2], $$[$0], 'lte'];
break;
case 17:this.$ = [$$[$0-2], $$[$0], 'gte'];
break;
case 19:this.$ = [$$[$0-2], $$[$0], 'eq'];
break;
case 20:this.$ = [$$[$0-2], $$[$0], 'neq'];
break;
case 21:this.$ = [$$[$0-2], $$[$0], 'like'];
break;
case 22:this.$ = [$$[$0-2], $$[$0], 'notLike'];
break;
case 24:this.$ = [$$[$0-2], $$[$0], 'in'];
break;
case 25:this.$ = [$$[$0-2], $$[$0], 'notIn'];
break;
case 26:this.$ = [$$[$0-2], $$[$0], 'in'];
break;
case 27:this.$ = [$$[$0-2], $$[$0], 'notIn'];
break;
case 29:this.$ = [$$[$0-2], $$[$0], 'and'];
break;
case 31:this.$ = [$$[$0-2], $$[$0], 'or'];
break;
case 33:this.$ = [$$[$0-2], $$[$0], 'arguments']
break;
case 34:this.$ = [$$[$0-2], [null, null, 'arguments'], 'function']
break;
case 35:this.$ = [$$[$0-3], $$[$0-1], 'function']
break;
case 37:this.$ = [$$[$0-2],$$[$0], 'prop'];
break;
case 38:this.$ = [$$[$0-2],$$[$0], 'prop'];
break;
case 39:this.$ = [String(yytext), null, 'identifier'];
break;
case 40:this.$ = [String(yytext.replace(/^'|'$/g, '')), null, 'string'];
break;
case 41:this.$ = [Number(yytext), null, 'number'];
break;
case 42:this.$ = [RegExp(yytext.replace(/^\/|\/$/g, '')), null, 'regexp'];
break;
case 43:this.$ = [yytext == 'true', null, 'boolean'];
break;
case 44:this.$ = [null, null, 'null'];
break;
case 45:this.$ = [null, null, 'array'];
break;
case 46:this.$ = [$$[$0-1], null, 'array'];
break;
case 55:this.$ = [$$[$0-1], null, 'composite']
break;
}
},
table: [{3:1,4:2,6:29,7:7,8:[1,30],9:28,13:27,15:18,17:8,22:6,27:5,29:15,31:16,32:4,34:3,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{1:[3]},{5:[1,31]},{5:[2,56],35:[1,32],41:[2,56]},{5:[2,30],33:[1,33],35:[2,30],41:[2,30]},{5:[2,28],33:[2,28],35:[2,28],41:[2,28]},{5:[2,23],23:[1,34],24:[1,35],25:[1,36],26:[1,37],33:[2,23],35:[2,23],41:[2,23]},{5:[2,2],8:[2,2],10:[2,2],11:[2,2],12:[2,2],14:[2,2],16:[2,2],18:[2,2],19:[2,2],20:[2,2],21:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],28:[1,38],30:[1,39],33:[2,2],35:[2,2],41:[2,2]},{5:[2,18],18:[1,40],19:[1,41],20:[1,42],21:[1,43],23:[2,18],24:[2,18],25:[2,18],26:[2,18],33:[2,18],35:[2,18],41:[2,18]},{5:[2,47],8:[2,47],10:[2,47],11:[2,47],12:[2,47],14:[2,47],16:[2,47],18:[2,47],19:[2,47],20:[2,47],21:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],28:[2,47],30:[2,47],33:[2,47],35:[2,47],37:[2,47],41:[2,47],55:[2,47]},{5:[2,48],8:[2,48],10:[2,48],11:[2,48],12:[2,48],14:[2,48],16:[2,48],18:[2,48],19:[2,48],20:[2,48],21:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],28:[2,48],30:[2,48],33:[2,48],35:[2,48],37:[2,48],41:[2,48],55:[2,48]},{5:[2,49],8:[2,49],10:[2,49],11:[2,49],12:[2,49],14:[2,49],16:[2,49],18:[2,49],19:[2,49],20:[2,49],21:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],28:[2,49],30:[2,49],33:[2,49],35:[2,49],37:[2,49],41:[2,49],55:[2,49]},{5:[2,50],8:[2,50],10:[2,50],11:[2,50],12:[2,50],14:[2,50],16:[2,50],18:[2,50],19:[2,50],20:[2,50],21:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],28:[2,50],30:[2,50],33:[2,50],35:[2,50],37:[2,50],41:[2,50],55:[2,50]},{5:[2,51],8:[2,51],10:[2,51],11:[2,51],12:[2,51],14:[2,51],16:[2,51],18:[2,51],19:[2,51],20:[2,51],21:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],28:[2,51],30:[2,51],33:[2,51],35:[2,51],37:[2,51],41:[2,51],55:[2,51]},{5:[2,52],8:[2,52],10:[2,52],11:[2,52],12:[2,52],14:[2,52],16:[2,52],18:[2,52],19:[2,52],20:[2,52],21:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],28:[2,52],30:[2,52],33:[2,52],35:[2,52],37:[2,52],41:[2,52],55:[2,52]},{5:[2,53],8:[2,53],10:[2,53],11:[2,53],12:[2,53],14:[2,53],16:[2,53],18:[2,53],19:[2,53],20:[2,53],21:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],28:[2,53],30:[2,53],33:[2,53],35:[2,53],37:[2,53],41:[2,53],55:[2,53]},{5:[2,54],8:[2,54],10:[2,54],11:[2,54],12:[2,54],14:[2,54],16:[2,54],18:[2,54],19:[2,54],20:[2,54],21:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],28:[2,54],30:[2,54],33:[2,54],35:[2,54],37:[2,54],41:[2,54],43:[1,44],55:[2,54]},{4:45,6:29,7:7,8:[1,30],9:28,13:27,15:18,17:8,22:6,27:5,29:15,31:16,32:4,34:3,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{5:[2,13],16:[1,46],18:[2,13],19:[2,13],20:[2,13],21:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],33:[2,13],35:[2,13],41:[2,13]},{5:[2,40],8:[2,40],10:[2,40],11:[2,40],12:[2,40],14:[2,40],16:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],28:[2,40],30:[2,40],33:[2,40],35:[2,40],37:[2,40],41:[2,40],55:[2,40]},{5:[2,41],8:[2,41],10:[2,41],11:[2,41],12:[2,41],14:[2,41],16:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],28:[2,41],30:[2,41],33:[2,41],35:[2,41],37:[2,41],41:[2,41],55:[2,41]},{5:[2,42],8:[2,42],10:[2,42],11:[2,42],12:[2,42],14:[2,42],16:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],28:[2,42],30:[2,42],33:[2,42],35:[2,42],37:[2,42],41:[2,42],55:[2,42]},{5:[2,43],8:[2,43],10:[2,43],11:[2,43],12:[2,43],14:[2,43],16:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],28:[2,43],30:[2,43],33:[2,43],35:[2,43],37:[2,43],41:[2,43],55:[2,43]},{5:[2,44],8:[2,44],10:[2,44],11:[2,44],12:[2,44],14:[2,44],16:[2,44],18:[2,44],19:[2,44],20:[2,44],21:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],28:[2,44],30:[2,44],33:[2,44],35:[2,44],37:[2,44],41:[2,44],55:[2,44]},{5:[2,39],8:[2,39],10:[2,39],11:[2,39],12:[2,39],14:[2,39],16:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],28:[2,39],30:[2,39],33:[2,39],35:[2,39],37:[2,39],40:[1,47],41:[2,39],43:[2,39],55:[2,39]},{7:50,29:15,31:16,36:49,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25],55:[1,48]},{5:[2,36],8:[2,36],10:[2,36],11:[2,36],12:[2,36],14:[2,36],16:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],28:[2,36],30:[2,36],33:[2,36],35:[2,36],37:[2,36],41:[2,36],43:[2,36],55:[2,36]},{5:[2,11],8:[1,52],14:[1,51],16:[2,11],18:[2,11],19:[2,11],20:[2,11],21:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],33:[2,11],35:[2,11],41:[2,11]},{5:[2,8],8:[2,8],10:[1,53],11:[1,54],12:[1,55],14:[2,8],16:[2,8],18:[2,8],19:[2,8],20:[2,8],21:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],33:[2,8],35:[2,8],41:[2,8]},{5:[2,4],8:[2,4],10:[2,4],11:[2,4],12:[2,4],14:[2,4],16:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],33:[2,4],35:[2,4],41:[2,4]},{6:56,7:57,8:[1,30],29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{1:[2,1]},{6:29,7:7,8:[1,30],9:28,13:27,15:18,17:8,22:6,27:5,29:15,31:16,32:58,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:7,8:[1,30],9:28,13:27,15:18,17:8,22:6,27:59,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:18,17:60,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:18,17:61,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:18,17:62,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:18,17:63,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{29:64,31:65,39:[1,66],42:26,54:[1,25]},{29:67,31:68,39:[1,66],42:26,54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:69,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:70,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:71,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:28,13:27,15:72,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{38:74,39:[1,24],42:73},{41:[1,75]},{6:29,7:57,8:[1,30],9:28,13:76,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{7:50,29:15,31:16,36:78,38:14,39:[1,24],40:[1,17],41:[1,77],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{5:[2,45],8:[2,45],10:[2,45],11:[2,45],12:[2,45],14:[2,45],16:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],28:[2,45],30:[2,45],33:[2,45],35:[2,45],37:[2,45],41:[2,45],55:[2,45]},{37:[1,80],55:[1,79]},{37:[2,32],41:[2,32],55:[2,32]},{6:29,7:57,8:[1,30],9:81,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:29,7:57,8:[1,30],9:82,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:83,7:57,8:[1,30],29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:84,7:57,8:[1,30],29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{6:85,7:57,8:[1,30],29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{5:[2,3],8:[2,3],10:[2,3],11:[2,3],12:[2,3],14:[2,3],16:[2,3],18:[2,3],19:[2,3],20:[2,3],21:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],33:[2,3],35:[2,3],41:[2,3]},{5:[2,2],8:[2,2],10:[2,2],11:[2,2],12:[2,2],14:[2,2],16:[2,2],18:[2,2],19:[2,2],20:[2,2],21:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],33:[2,2],35:[2,2],41:[2,2]},{5:[2,31],33:[1,33],35:[2,31],41:[2,31]},{5:[2,29],33:[2,29],35:[2,29],41:[2,29]},{5:[2,19],18:[1,40],19:[1,41],20:[1,42],21:[1,43],23:[2,19],24:[2,19],25:[2,19],26:[2,19],33:[2,19],35:[2,19],41:[2,19]},{5:[2,20],18:[1,40],19:[1,41],20:[1,42],21:[1,43],23:[2,20],24:[2,20],25:[2,20],26:[2,20],33:[2,20],35:[2,20],41:[2,20]},{5:[2,21],18:[1,40],19:[1,41],20:[1,42],21:[1,43],23:[2,21],24:[2,21],25:[2,21],26:[2,21],33:[2,21],35:[2,21],41:[2,21]},{5:[2,22],18:[1,40],19:[1,41],20:[1,42],21:[1,43],23:[2,22],24:[2,22],25:[2,22],26:[2,22],33:[2,22],35:[2,22],41:[2,22]},{5:[2,24],33:[2,24],35:[2,24],41:[2,24]},{5:[2,26],33:[2,26],35:[2,26],41:[2,26],43:[1,44]},{5:[2,39],33:[2,39],35:[2,39],41:[2,39],43:[2,39]},{5:[2,25],33:[2,25],35:[2,25],41:[2,25]},{5:[2,27],33:[2,27],35:[2,27],41:[2,27],43:[1,44]},{5:[2,14],16:[1,46],18:[2,14],19:[2,14],20:[2,14],21:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],33:[2,14],35:[2,14],41:[2,14]},{5:[2,15],16:[1,46],18:[2,15],19:[2,15],20:[2,15],21:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],33:[2,15],35:[2,15],41:[2,15]},{5:[2,16],16:[1,46],18:[2,16],19:[2,16],20:[2,16],21:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],33:[2,16],35:[2,16],41:[2,16]},{5:[2,17],16:[1,46],18:[2,17],19:[2,17],20:[2,17],21:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],33:[2,17],35:[2,17],41:[2,17]},{5:[2,37],8:[2,37],10:[2,37],11:[2,37],12:[2,37],14:[2,37],16:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],28:[2,37],30:[2,37],33:[2,37],35:[2,37],37:[2,37],41:[2,37],43:[2,37],55:[2,37]},{5:[2,38],8:[2,38],10:[2,38],11:[2,38],12:[2,38],14:[2,38],16:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],28:[2,38],30:[2,38],33:[2,38],35:[2,38],37:[2,38],41:[2,38],43:[2,38],55:[2,38]},{5:[2,55],8:[2,55],10:[2,55],11:[2,55],12:[2,55],14:[2,55],16:[2,55],18:[2,55],19:[2,55],20:[2,55],21:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],28:[2,55],30:[2,55],33:[2,55],35:[2,55],37:[2,55],41:[2,55],55:[2,55]},{5:[2,12],8:[1,52],14:[1,51],16:[2,12],18:[2,12],19:[2,12],20:[2,12],21:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],33:[2,12],35:[2,12],41:[2,12]},{5:[2,34],8:[2,34],10:[2,34],11:[2,34],12:[2,34],14:[2,34],16:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],28:[2,34],30:[2,34],33:[2,34],35:[2,34],37:[2,34],41:[2,34],43:[2,34],55:[2,34]},{37:[1,80],41:[1,86]},{5:[2,46],8:[2,46],10:[2,46],11:[2,46],12:[2,46],14:[2,46],16:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],28:[2,46],30:[2,46],33:[2,46],35:[2,46],37:[2,46],41:[2,46],55:[2,46]},{7:87,29:15,31:16,38:14,39:[1,24],40:[1,17],42:26,44:9,45:[1,19],46:10,47:[1,20],48:11,49:[1,21],50:12,51:[1,22],52:13,53:[1,23],54:[1,25]},{5:[2,9],8:[2,9],10:[1,53],11:[1,54],12:[1,55],14:[2,9],16:[2,9],18:[2,9],19:[2,9],20:[2,9],21:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],33:[2,9],35:[2,9],41:[2,9]},{5:[2,10],8:[2,10],10:[1,53],11:[1,54],12:[1,55],14:[2,10],16:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],33:[2,10],35:[2,10],41:[2,10]},{5:[2,5],8:[2,5],10:[2,5],11:[2,5],12:[2,5],14:[2,5],16:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],33:[2,5],35:[2,5],41:[2,5]},{5:[2,6],8:[2,6],10:[2,6],11:[2,6],12:[2,6],14:[2,6],16:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],33:[2,6],35:[2,6],41:[2,6]},{5:[2,7],8:[2,7],10:[2,7],11:[2,7],12:[2,7],14:[2,7],16:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],33:[2,7],35:[2,7],41:[2,7]},{5:[2,35],8:[2,35],10:[2,35],11:[2,35],12:[2,35],14:[2,35],16:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],28:[2,35],30:[2,35],33:[2,35],35:[2,35],37:[2,35],41:[2,35],43:[2,35],55:[2,35]},{37:[2,33],41:[2,33],55:[2,33]}],
defaultActions: {31:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
undefined/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 28;
break;
case 1:return 30;
break;
case 2:return 'from';
break;
case 3:/* skip whitespace */
break;
case 4:return 47;
break;
case 5:return 53;
break;
case 6:return 23;
break;
case 7:return 24;
break;
case 8:return 20;
break;
case 9:return 18;
break;
case 10:return 21;
break;
case 11:return 19;
break;
case 12:return 25;
break;
case 13:return 26;
break;
case 14:return 33;
break;
case 15:return 35;
break;
case 16:return 51;
break;
case 17:return 45;
break;
case 18:return 39;
break;
case 19:return 49;
break;
case 20:return 43;
break;
case 21:return 10;
break;
case 22:return 11;
break;
case 23:return 12;
break;
case 24:return 37;
break;
case 25:return 8;
break;
case 26:return 25;
break;
case 27:return 26;
break;
case 28:return 23;
break;
case 29:return 23;
break;
case 30:return 24;
break;
case 31:return 24;
break;
case 32:return 20;
break;
case 33:return 21;
break;
case 34:return 19;
break;
case 35:return 18;
break;
case 36:return 33;
break;
case 37:return 35;
break;
case 38:return 14;
break;
case 39:return 16;
break;
case 40:return 40;
break;
case 41:return 55;
break;
case 42:return 54;
break;
case 43:return 41;
break;
case 44:return 5;
break;
}
},
rules: [/^(?:\s+in\b)/,/^(?:\s+notIn\b)/,/^(?:\s+from\b)/,/^(?:\s+)/,/^(?:[0-9]+(?:\.[0-9]+)?\b)/,/^(?:null\b)/,/^(?:(eq|EQ))/,/^(?:(neq|NEQ))/,/^(?:(lte|LTE))/,/^(?:(lt|LT))/,/^(?:(gte|GTE))/,/^(?:(gt|GT))/,/^(?:(like|LIKE))/,/^(?:(notLike|NOT_LIKE))/,/^(?:(and|AND))/,/^(?:(or|OR))/,/^(?:(true|false))/,/^(?:'[^']*')/,/^(?:\$?[a-zA-Z0-9]+)/,/^(?:\/(.*)\/)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:\%)/,/^(?:,)/,/^(?:-)/,/^(?:=~)/,/^(?:!=~)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:!==)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\])/,/^(?:\[)/,/^(?:\))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}