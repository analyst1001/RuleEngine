// Generated by CoffeeScript 1.6.2
/*

  Defines Match and Context objects

  Match object
    variables --> ???
    facts --> list of fact objects
    factIds --> list of fact ids corresponding to fact objects
    factHash --> ???
    recency --> recency list of fact objects
    constraints --> ???
    isMatch --> ???
    hashCode --> a string representing a match object

    merge(mr) --> Match Object
      mr --> Match object to be merged with current one
    returns a merged Match Object

  Context object --> connect Match and fact objects
    match --> Match object
    factHash --> ???
    fact --> Fact object
    hashCode --> hashCode of the Match object
    paths --> ???

    set(key, value) --> Context object
      key --> ???
      value --> ???
    returns a modified Context object with key and value added to factHash

    isMatch(isMatch) --> Contect Object
      isMatch --> boolean
    returns a modified Context Object

    clone(fact, paths, match) --> Context Object
      fact --> Fact object
      paths --> ???
      match --> Match object
    returns a new Context object which differs from the current object in the parameters provided
*/


(function() {
  "use strict";
  var Context, Match, declare, extd, merge, union;

  extd = require("./extended");

  declare = extd.declare;

  merge = extd.merge;

  union = extd.union;

  Match = declare({
    instance: {
      constructor: function(assertable) {
        var fact;

        assertable = assertable || {};
        this.variables = [];
        this.facts = [];
        this.factIds = [];
        this.factHash = assertable.factHash || {};
        this.recency = [];
        this.constraints = [];
        this.isMatch = true;
        this.hashCode = "";
        if (assertable instanceof this._static) {
          this.isMatch = assertable.isMatch;
          this.facts = this.facts.concat(assertable.facts);
          this.factIds = this.factIds.concat(assertable.factIds);
          this.hashCode = this.factIds.join(":");
          this.factHash = merge(factHash, assertable.factHash);
          return this.recency = union(this.recency, assertable.recency);
        } else {
          fact = assertable;
          if (fact) {
            this.facts.push(fact);
            this.factIds.push(fact.id);
            this.recency.push(fact.recency);
            return this.hashCode += this.factIds.join(":");
          }
        }
      },
      merge: function(mr) {
        var ret;

        ret = new this._static();
        ret.isMatch = mr.isMatch;
        ret.facts = this.facts.concat(mr.facts);
        ret.factIds = this.factIds.concat(mr.factIds);
        ret.hashCode = ret.factIds.join(":");
        ret.factHash = merge({}, this.factHash, mr.factHash);
        ret.recency = union(this.recency, mr.recency);
        return ret;
      }
    }
  });

  Context = declare({
    instance: {
      match: null,
      factHash: null,
      fact: null,
      hashCode: null,
      paths: null,
      constructor: function(fact, paths, mr) {
        var match;

        this.fact = fact;
        this.paths = paths || null;
        match = this.match = mr || new Match(fact);
        this.factHash = match.factHash;
        this.hashCode = match.hashCode;
        return this.factIds = match.factIds;
      },
      set: function(key, value) {
        this.factHash[key] = value;
        return this;
      },
      isMatch: function(isMatch) {
        this.match.isMatch = isMatch;
        return this;
      },
      clone: function(fact, paths, match) {
        return new Context(fact || this.fact, paths || this.paths, match || this.match);
      }
    }
  }).as(module);

}).call(this);
